{
  "name": "Buildversions-maven-plugin",
  "tagline": "Maven plugin for Semantic Versioning",
  "body": "# Introduction\r\nThis plugin aims to automate the generation of [semantic version](http://semver.org/) numbers for your maven project.\r\n\r\n# Usage\r\n\r\n* Add the pluginto your pom.xml\r\n``` xml\r\n<plugin>\r\n        <groupId>com.nimworks</groupId>\r\n        <artifactId>buildversion-maven-plugin</artifactId>\r\n        <version>1.0.0</version>\r\n        <executions>\r\n          <execution>\r\n            <id>buildversions</id>\r\n            <phase>validate</phase>\r\n            <goals>\r\n              <goal>generate</goal>\r\n            </goals>\r\n          </execution>\r\n        </executions>\r\n      </plugin>\r\n```\r\n* Do something with the generate version number\r\n For example \r\n```\r\n<groupId>com.nimworks.it</groupId>\r\n  <artifactId>simple-it</artifactId>\r\n  <version>${buildVersion}-SNAPSHOT</version>\r\n\r\n  <description>A simple IT</description>\r\n```\r\nBuilds are currently separated into 3 types\r\n* Major\r\n* Minor\r\n* Patch\r\n\r\nThe generated version takes the form {Major}.{Minor}.{Pathc}\r\n\r\n# Example\r\n* Build PATCH\r\n```mvn clean package ```\r\nif this is the first run, it will generate app-1.0.0-SNAPSHOT.jar. Subsequent executions will only increment the patch version number (1.0.1, 1.0.2, etc). The example above is the same as running ```mvn clean package -Dbuild.type=PATCH```\r\n\r\n* Build Minor Version\r\n```mvn clean package -Dbuild.type=MINOR```\r\nif this is the first run, it will generate app-1.1.0-SNAPSHOT.jar. Subsequent executions will only increment the patch version number (1.2.0, 1.3.0, etc). Notice that this mode will reset the patch versions to 0\r\n\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}